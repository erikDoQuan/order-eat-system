import { forwardRef, Inject, Injectable, Logger, NotFoundException } from '@nestjs/common';
import { inArray } from 'drizzle-orm';
import { v4 as uuidv4 } from 'uuid';

import { DishSnapshotRepository } from '~/database/repositories/dish_snapshot.repository';
import { DishRepository } from '~/database/repositories/dish.repository';
import { OrderRepository } from '~/database/repositories/order.repository';
import { UserRepository } from '~/database/repositories/user.repository';
import { Order } from '~/database/schema/orders';
import { userTransactions } from '~/database/schema/user_transactions';
import { NotificationGateway } from '../notification/notification.gateway';
// import { ZaloPayService } from '../payment/zalopay.service';
import { TransactionMethod, TransactionStatus } from '../user_transaction/dto/create-user-transaction.dto';
import { UserTransactionService } from '../user_transaction/user-transaction.service';
import { CompleteOrderDto } from './dto/complete-order.dto';
import { CreateOrderDto } from './dto/create-order.dto';
import { FetchOrdersDto } from './dto/fetch-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';

@Injectable()
export class OrderService {
  private readonly logger = new Logger('OrderService');
  constructor(
    private readonly orderRepository: OrderRepository,
    private readonly dishRepository: DishRepository,
    private readonly dishSnapshotRepository: DishSnapshotRepository, // th√™m d√≤ng n√†y
    private readonly userRepository: UserRepository,
    private notificationGateway: NotificationGateway,
    private readonly userTransactionService: UserTransactionService, // th√™m d√≤ng n√†y
    @Inject('ZALOPAY_SERVICE')
    private readonly zaloPayService: any,
  ) {}

  async findAll(dto: FetchOrdersDto) {
    const result = await this.orderRepository.find(dto);
    const orders = result.data || [];

    // L·∫•y t·∫•t c·∫£ id admin t·∫°o/c·∫≠p nh·∫≠t
    const adminIds = [
      ...new Set([...orders.map((o: Order) => o.createdBy).filter(Boolean), ...orders.map((o: Order) => o.updatedBy).filter(Boolean)]),
    ];

    // L·∫•y th√¥ng tin user
    const users = adminIds.length > 0 ? await this.userRepository.findManyByIds(adminIds) : [];
    const userMap = new Map(users.map(u => [u.id, `${u.firstName || ''} ${u.lastName || ''}`.trim() || u.email || u.id]));

    // L·∫•y t·∫•t c·∫£ orderId ƒë·ªÉ l·∫•y transaction
    const orderIds = orders.map((o: any) => o.id);
    const transactionsByOrderId: Record<string, any> = {};
    if (orderIds.length > 0) {
      // L·∫•y t·∫•t c·∫£ transaction li√™n quan c√°c order n√†y
      const allTransactions = await this.userTransactionService.findByOrderIds(orderIds);
      // Group theo orderId
      for (const tx of allTransactions) {
        if (!transactionsByOrderId[tx.orderId]) transactionsByOrderId[tx.orderId] = [];
        transactionsByOrderId[tx.orderId].push(tx);
      }
    }

    // Th√™m tr∆∞·ªùng t√™n admin v√† method v√†o t·ª´ng order
    const ordersWithAdminName = orders.map((order: any) => {
      let method = undefined;
      const txs = transactionsByOrderId[order.id] || [];
      // ∆Øu ti√™n transaction c√≥ status = 'success', n·∫øu kh√¥ng c√≥ th√¨ l·∫•y transaction ƒë·∫ßu ti√™n
      const successTx = txs.find((t: any) => t.status === 'success');
      if (successTx) method = successTx.method;
      else if (txs.length > 0) method = txs[0].method;
      return {
        ...order,
        createdByName: order.createdBy ? userMap.get(order.createdBy) : null,
        updatedByName: order.updatedBy ? userMap.get(order.updatedBy) : null,
        method,
      };
    });

    return {
      ...result,
      data: ordersWithAdminName,
    };
  }

  async findOne(id: string) {
    const order = await this.orderRepository.findOne(id);
    if (!order) throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');

    // Enrich th√¥ng tin user
    let userInfo = null;
    if (order.userId) {
      const user = await this.userRepository.findOne(order.userId);
      if (user) {
        userInfo = {
          id: user.id,
          email: user.email,
          phone: (user as any).phone,
          firstName: user.firstName,
          lastName: user.lastName,
          fullName: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,
        };
      }
    }

    // Enrich t·ª´ng item v·ªõi th√¥ng tin s·∫£n ph·∫©m
    const orderItems = (order.orderItems as { items: any[] } | undefined)?.items;
    if (orderItems && Array.isArray(orderItems)) {
      const enrichedItems = await Promise.all(
        orderItems.map(async item => {
          let name = '-';
          let image = '';
          let price = 0;
          let baseName = item.base;
          let toppingPrice = 0;
          // ∆Øu ti√™n l·∫•y t·ª´ snapshot n·∫øu c√≥
          if (item.dishSnapshotId) {
            const snapshot = await this.dishSnapshotRepository.findOne(item.dishSnapshotId);
            if (snapshot) {
              name = snapshot.name || name;
              image = snapshot.imageUrl || image;
              price = Number(snapshot.basePrice) || price;
            }
          }
          // N·∫øu kh√¥ng c√≥ snapshot, l·∫•y t·ª´ dish
          if ((!name || name === '-') && item.dishId) {
            const dish = await this.dishRepository.findOne(item.dishId);
            if (dish) {
              name = dish.name || name;
              image = dish.imageUrl || dish.image || image;
              price = Number(dish.basePrice) || price;
            }
          }
          // N·∫øu item.base l√† id topping, enrich t√™n v√† gi√° topping
          if (item.base && !['d√†y', 'm·ªèng'].includes(item.base)) {
            const topping = await this.dishRepository.findOne(item.base);
            if (topping) {
              baseName = topping.name;
              toppingPrice = Number(topping.basePrice) || 0;
            }
          }
          return {
            ...item,
            name,
            image,
            price,
            baseName,
            toppingPrice,
          };
        }),
      );
      (order.orderItems as { items: any[] }).items = enrichedItems;
    }
    // B·ªï sung th√¥ng tin admin c·∫≠p nh·∫≠t ƒë∆°n h√†ng
    let updatedByInfo = null;
    if (order.updatedBy) {
      const admin = await this.userRepository.findOne(order.updatedBy);
      if (admin) {
        updatedByInfo = {
          name: `${admin.firstName || ''} ${admin.lastName || ''}`.trim() || admin.email,
          email: admin.email,
        };
      }
    }
    return {
      ...order,
      user: userInfo,
      updatedByInfo,
      paymentMethod: order.zpTransToken || order.appTransId ? 'zalopay' : 'cash',
      order_number: order.orderNumber || order.id,
    };
  }

  async findOneByOrderNumber(orderNumber: number) {
    const order = await this.orderRepository.findOneByOrderNumber(orderNumber);
    if (!order) throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
    // Enrich t·ª´ng item v·ªõi th√¥ng tin s·∫£n ph·∫©m (reuse logic t·ª´ findOne n·∫øu mu·ªën)
    return {
      ...order,
      order_number: order.orderNumber || order.id,
    };
  }

  async findOneByAppTransId(appTransId: string) {
    console.log('üîé T√¨m ƒë∆°n h√†ng theo appTransId:', appTransId);
    const order = await this.orderRepository.findOneByAppTransId(appTransId);
    if (!order) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi appTransId:', appTransId);
      throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
    }

    // Enrich th√¥ng tin user
    let userInfo = null;
    if (order.userId) {
      const user = await this.userRepository.findOne(order.userId);
      if (user) {
        userInfo = {
          id: user.id,
          email: user.email,
          phone: (user as any).phone,
          firstName: user.firstName,
          lastName: user.lastName,
          fullName: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,
        };
      }
    }

    // Enrich t·ª´ng item v·ªõi th√¥ng tin s·∫£n ph·∫©m (gi·ªëng findOne)
    const orderItems = (order.orderItems as { items: any[] } | undefined)?.items;
    if (orderItems && Array.isArray(orderItems)) {
      const enrichedItems = await Promise.all(
        orderItems.map(async item => {
          let name = '-';
          let image = '';
          let price = 0;
          let baseName = item.base;
          let toppingPrice = 0;
          // ∆Øu ti√™n l·∫•y t·ª´ snapshot n·∫øu c√≥
          if (item.dishSnapshotId) {
            const snapshot = await this.dishSnapshotRepository.findOne(item.dishSnapshotId);
            if (snapshot) {
              name = snapshot.name || name;
              image = snapshot.imageUrl || image;
              price = Number(snapshot.basePrice) || price;
            }
          }
          // N·∫øu kh√¥ng c√≥ snapshot, l·∫•y t·ª´ dish
          if ((!name || name === '-') && item.dishId) {
            const dish = await this.dishRepository.findOne(item.dishId);
            if (dish) {
              name = dish.name || name;
              image = dish.imageUrl || dish.image || image;
              price = Number(dish.basePrice) || price;
            }
          }
          // N·∫øu item.base l√† id topping, enrich t√™n v√† gi√° topping
          if (item.base && !['d√†y', 'm·ªèng'].includes(item.base)) {
            const topping = await this.dishRepository.findOne(item.base);
            if (topping) {
              baseName = topping.name;
              toppingPrice = Number(topping.basePrice) || 0;
            }
          }
          return {
            ...item,
            name,
            image,
            price,
            baseName,
            toppingPrice,
          };
        }),
      );
      (order.orderItems as { items: any[] }).items = enrichedItems;
    }

    // Tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng, ƒë·∫∑c bi·ªát l√† status
    console.log('‚úÖ ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng:', JSON.stringify(order, null, 2));
    return {
      ...order,
      user: userInfo,
      paymentMethod: order.zpTransToken || order.appTransId ? 'zalopay' : 'cash',
      order_number: order.orderNumber || order.id,
    };
  }

  async create(dto: CreateOrderDto) {
    // Validate type v√† deliveryAddress
    if (dto.type === 'delivery' && !dto.deliveryAddress) {
      throw new Error('ƒê·ªãa ch·ªâ giao h√†ng l√† b·∫Øt bu·ªôc khi ch·ªçn h√¨nh th·ª©c giao h√†ng (delivery)');
    }
    // ƒê·∫£m b·∫£o m·ªói item c√≥ id v√† enrich snapshot
    if (dto.orderItems && dto.orderItems.items) {
      dto.orderItems.items = await Promise.all(
        dto.orderItems.items.map(async item => {
          const dish = await this.dishRepository.findOne(item.dishId);
          // T·∫°o snapshot
          const validSizes = ['small', 'medium', 'large'];
          const validSize = item.size && validSizes.includes(item.size) ? item.size : null;
          // T·∫°o snapshot
          const snapshot = await this.dishSnapshotRepository.create({
            dishId: dish.id,
            name: dish.name,
            basePrice: dish.basePrice,
            description: dish.description,
            imageUrl: dish.imageUrl || dish.image, // tu·ª≥ schema
            status: dish.status,
            size: validSize,
            typeName: dish.typeName,
            categoryId: dish.categoryId,
            createdBy: dish.createdBy,
            updatedBy: dish.updatedBy,
          });
          return {
            ...item,
            id: item.id || uuidv4(),
            dishSnapshotId: snapshot.id, // l∆∞u id snapshot v√†o item
          };
        }),
      );
      // T√≠nh t·ªïng ti·ªÅn gi·ªëng frontend
      let total = 0;
      for (const item of dto.orderItems.items) {
        const dish = await this.dishRepository.findOne(item.dishId);
        let price = dish?.basePrice ? parseFloat(dish.basePrice) : 0;
        // T√≠nh th√™m gi√° size
        if (item.size) {
          if (item.size === 'medium') price += 90000;
          if (item.size === 'large') price += 190000;
        }
        // T√≠nh th√™m gi√° topping (n·∫øu base l√† id topping)
        if (item.base && !['d√†y', 'm·ªèng'].includes(item.base)) {
          const topping = await this.dishRepository.findOne(item.base);
          if (topping) price += topping.basePrice ? parseFloat(topping.basePrice) : 0;
        }
        total += price * (item.quantity || 1);
      }
      if (dto.type === 'delivery') {
        total += 25000;
      }
      dto.totalAmount = total;
    }
    // X·ª≠ l√Ω pickupTime cho ƒë∆°n pickup
    let pickupTime: string | undefined = dto.pickupTime;
    if (dto.type === 'pickup' || dto.type === 'delivery') {
      if (!pickupTime) {
        // N·∫øu kh√¥ng truy·ªÅn pickupTime, m·∫∑c ƒë·ªãnh:
        // - pickup: +15 ph√∫t
        // - delivery: +30 ph√∫t
        const now = new Date();
        // L·∫•y th·ªùi gian UTC+7
        const vnOffset = 7 * 60; // ph√∫t
        const localNow = new Date(now.getTime() + (vnOffset - now.getTimezoneOffset()) * 60000);
        const addMinutes = dto.type === 'pickup' ? 15 : 30;
        const pickupDate = new Date(localNow.getTime() + addMinutes * 60000);
        const yyyy = pickupDate.getFullYear();
        const MM = String(pickupDate.getMonth() + 1).padStart(2, '0');
        const dd = String(pickupDate.getDate()).padStart(2, '0');
        const hh = String(pickupDate.getHours()).padStart(2, '0');
        const mm = String(pickupDate.getMinutes()).padStart(2, '0');
        pickupTime = `${yyyy}-${MM}-${dd} ${hh}:${mm}`;
      }
    } else {
      pickupTime = undefined;
    }
    // Ch·ªâ truy·ªÅn c√°c tr∆∞·ªùng h·ª£p l·ªá v√†o DB
    const { note, appTransId, ...rest } = dto;
    this.logger?.log?.('orderRepository.create object:', { ...rest, appTransId });
    const order = await this.orderRepository.create({
      ...rest,
      appTransId, // ƒë·∫£m b·∫£o lu√¥n truy·ªÅn appTransId
      orderItems: dto.orderItems, // ƒë√£ c√≥ note trong t·ª´ng item
      note: note, // n·∫øu mu·ªën l∆∞u note t·ªïng
      pickupTime,
    });
    // L·∫•y l·∫°i order t·ª´ DB ƒë·ªÉ ch·∫Øc ch·∫Øn c√≥ tr∆∞·ªùng orderNumber
    const orderFull = await this.orderRepository.findOne(order.id);

    // Log appTransId v√† orderFull ƒë·ªÉ debug
    console.log('AppTransId:', appTransId);
    console.log('Saved Order:', JSON.stringify(orderFull, null, 2));

    // L∆∞u user_transaction v·ªõi status ph√π h·ª£p khi t·∫°o ƒë∆°n h√†ng
    if (orderFull && dto.userId) {
      await this.userTransactionService.create({
        userId: dto.userId,
        orderId: orderFull.id,
        amount: String(orderFull.totalAmount),
        method: dto.paymentMethod === 'zalopay' ? TransactionMethod.ZALOPAY : TransactionMethod.CASH,
        status: dto.paymentMethod === 'zalopay' ? TransactionStatus.SUCCESS : TransactionStatus.PENDING,
        transTime: new Date().toISOString(),
        transactionCode: null,
        description: `T·∫°o giao d·ªãch cho ƒë∆°n h√†ng #${orderFull.orderNumber}`,
      });
    }

    return {
      ...orderFull,
      order_number: orderFull.orderNumber,
    };
  }

  // Th√™m h√†m n√†y ƒë·ªÉ c·∫≠p nh·∫≠t ƒë∆°n pending th√†nh completed khi thanh to√°n
  async completeOrder(dto: CompleteOrderDto) {
    // 1. T√¨m ƒë∆°n h√†ng pending theo appTransId
    let existingOrder = null;
    if (dto.appTransId) {
      existingOrder = await this.orderRepository.findOneByAppTransId(dto.appTransId);
    } else {
      existingOrder = await this.orderRepository.findOne(dto.orderId);
    }
    if (!existingOrder) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng pending ƒë·ªÉ ho√†n t·∫•t');
    }

    // 2. G·ª≠i y√™u c·∫ßu x√°c minh thanh to√°n ZaloPay (n·∫øu c·∫ßn)
    // TODO: Add ZaloPay verification logic here if needed

    // 3. C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh completed (ch·ªâ cho cash orders, kh√¥ng cho ZaloPay)
    const updateData: any = {
      updatedBy: existingOrder.userId,
    };

    // Ch·ªâ update status th√†nh completed n·∫øu kh√¥ng ph·∫£i ZaloPay order
    if (!existingOrder.appTransId) {
      updateData.status = 'completed';
    }

    await this.orderRepository.update(existingOrder.id, updateData);
    return { message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', orderId: existingOrder.id };
  }

  async update(id: string, dto: UpdateOrderDto) {
    // N·∫øu ch·ªâ c·∫≠p nh·∫≠t status, kh√¥ng validate c√°c tr∆∞·ªùng kh√°c
    if (Object.keys(dto).length === 1 && dto.status) {
      const order = await this.orderRepository.findOne(id);
      if (!order) throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
      if (['pending', 'confirmed', 'preparing', 'delivering', 'completed', 'cancelled'].includes(dto.status)) {
        order.status = dto.status as any;
      }
      const updatedOrder = await this.orderRepository.update(id, order as UpdateOrderDto);
      return {
        ...updatedOrder,
        order_number: updatedOrder?.orderNumber || updatedOrder?.id,
      };
    }
    // Validate type v√† deliveryAddress
    if (dto.type === 'delivery' && !dto.deliveryAddress) {
      throw new Error('ƒê·ªãa ch·ªâ giao h√†ng l√† b·∫Øt bu·ªôc khi ch·ªçn h√¨nh th·ª©c giao h√†ng (delivery)');
    }
    // L·∫•y order hi·ªán t·∫°i
    const order = await this.orderRepository.findOne(id);
    if (!order) throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');

    // N·∫øu c√≥ orderItems th√¨ c·∫≠p nh·∫≠t quantity tuy·ªát ƒë·ªëi t·ª´ng item
    if (dto.orderItems && dto.orderItems.items) {
      // ƒê·∫£m b·∫£o m·ªói item c√≥ id
      dto.orderItems.items = dto.orderItems.items.map(item => ({
        ...item,
        id: item.id || uuidv4(),
      }));
      const newItems = dto.orderItems.items;
      const currentItems = (order.orderItems as { items: any[] })?.items || [];
      for (const newItem of newItems) {
        const idx = currentItems.findIndex(
          (i: any) => i.dishId === newItem.dishId && i.size === newItem.size && i.base === newItem.base && i.note === newItem.note,
        );
        if (idx > -1) {
          // C·∫≠p nh·∫≠t quantity tuy·ªát ƒë·ªëi, KH√îNG c·∫≠p nh·∫≠t t√™n m√≥n ƒë√£ snapshot
          currentItems[idx].quantity = newItem.quantity;
          currentItems[idx].id = newItem.id; // ƒê·∫£m b·∫£o id ƒë·ªìng b·ªô
        } else {
          // N·∫øu l√† item m·ªõi, t·∫°o snapshot m·ªõi cho item n√†y
          const dish = await this.dishRepository.findOne(newItem.dishId);
          const validSizes = ['small', 'medium', 'large'];
          const validSize = newItem.size && validSizes.includes(newItem.size) ? newItem.size : null;
          const snapshot = await this.dishSnapshotRepository.create({
            dishId: dish.id,
            name: dish.name,
            basePrice: dish.basePrice,
            description: dish.description,
            imageUrl: dish.imageUrl || dish.image,
            status: dish.status,
            size: validSize,
            typeName: dish.typeName,
            categoryId: dish.categoryId,
            createdBy: dish.createdBy,
            updatedBy: dish.updatedBy,
          });
          currentItems.push({ ...newItem, dishSnapshotId: snapshot.id });
        }
      }
      // Lo·∫°i b·ªè item c√≥ quantity <= 0
      order.orderItems = { items: currentItems.filter((i: any) => i.quantity > 0) };
      // T√≠nh l·∫°i t·ªïng ti·ªÅn
      let total = 0;
      for (const item of (order.orderItems as { items: any[] }).items) {
        // L·∫•y gi√° t·ª´ snapshot n·∫øu c√≥
        let price = 0;
        if (item.dishSnapshotId) {
          const snapshot = await this.dishSnapshotRepository.findOne(item.dishSnapshotId);
          price = snapshot?.basePrice ? parseFloat(snapshot.basePrice as any) : 0;
        } else {
          const dish = await this.dishRepository.findOne(item.dishId);
          price = dish?.basePrice ? parseFloat(dish.basePrice) : 0;
        }
        total += price * (item.quantity || 1);
      }
      if (order.type === 'delivery') {
        total += 25000;
      }
      order.totalAmount = total.toString();
    }

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng kh√°c n·∫øu c√≥
    if (dto.status && ['pending', 'confirmed', 'preparing', 'delivering', 'completed', 'cancelled'].includes(dto.status)) {
      order.status = dto.status as any;
    }
    if (dto.type && ['pickup', 'delivery'].includes(dto.type)) {
      order.type = dto.type as any;
    }
    if (dto.isActive !== undefined) order.isActive = dto.isActive;

    // ƒê·∫£m b·∫£o deliveryAddress ƒë√∫ng c·∫•u tr√∫c n·∫øu type l√† delivery
    if (order.type === 'delivery') {
      const deliveryAddress = (dto.deliveryAddress ?? order.deliveryAddress) as { address: string; phone: string; name?: string };
      if (deliveryAddress && deliveryAddress.address && deliveryAddress.phone) {
        order.deliveryAddress = deliveryAddress;
      } else {
        throw new Error('Thi·∫øu th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng (address, phone)');
      }
    }

    // L∆∞u updatedBy n·∫øu c√≥
    if (dto.updatedBy) {
      order.updatedBy = dto.updatedBy;
    }
    // L∆∞u l·∫°i order
    const updatedOrder = await this.orderRepository.update(id, order as UpdateOrderDto);

    // N·∫øu c·∫≠p nh·∫≠t status v√† c√≥ updatedBy (admin), th√¨ update user_transaction
    if (dto.status && dto.updatedBy && order.userId) {
      // Ch·ªâ c·∫≠p nh·∫≠t transaction cash sang success khi order completed
      if (dto.status === 'completed') {
        // L·∫•y t·∫•t c·∫£ transaction c·ªßa order
        const transactions = await this.userTransactionService.findByOrderId(order.id);
        for (const tx of transactions) {
          if (tx.method === 'cash') {
            await this.userTransactionService.updateByOrderId(order.id, {
              status: TransactionStatus.SUCCESS,
              transTime: new Date().toISOString(),
              description: `Admin x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng #${order.orderNumber || order.id}`,
            });
          }
        }
      } else {
        // X√°c ƒë·ªãnh status m·ªõi cho transaction
        let newStatus = TransactionStatus.PENDING;
        if (dto.status === 'confirmed') newStatus = TransactionStatus.SUCCESS;
        if (dto.status === 'cancelled') newStatus = TransactionStatus.CANCELLED;
        // Update user_transaction theo orderId
        await this.userTransactionService.updateByOrderId(order.id, {
          status: newStatus,
          transTime: new Date().toISOString(),
          description: `Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng #${order.orderNumber || order.id} sang ${dto.status}`,
        });
      }
    }

    return {
      ...updatedOrder,
      order_number: updatedOrder?.orderNumber || updatedOrder?.id,
    };
  }

  async delete(id: string, currentUserId: string) {
    // C√≥ th·ªÉ ki·ªÉm tra quy·ªÅn user ·ªü ƒë√¢y n·∫øu c·∫ßn
    return this.orderRepository.hardDelete(id);
  }

  async deleteHard(id: string) {
    return this.orderRepository.hardDelete(id);
  }

  async confirmOrder(dto: CreateOrderDto) {
    this.logger.log('confirmOrder called with dto:', JSON.stringify(dto, null, 2));

    // B∆Ø·ªöC 1: T·∫°o ƒë∆°n h√†ng trong database v·ªõi status 'pending' (kh√¥ng t·∫°o user_transaction)
    const order = await this.create({
      ...dto,
      status: 'pending', // ƒê·∫£m b·∫£o status l√† pending
    });

    this.logger.log('Order created:', order.id, order.orderNumber);

    // B∆Ø·ªöC 2: T·∫°o ƒë∆°n h√†ng ZaloPay
    const zaloPayResult = await this.zaloPayService.createOrder({
      amount: Number(dto.totalAmount),
      description: `Thanh to√°n ƒë∆°n h√†ng #${order.orderNumber || order.id}`,
      appTransId: dto.appTransId,
    });

    this.logger.log('ZaloPay result:', zaloPayResult);

    // C·∫≠p nh·∫≠t l·∫°i ƒë∆°n h√†ng v·ªõi appTransId v√† c√°c tr∆∞·ªùng t·ª´ zaloPayResult
    if (zaloPayResult && zaloPayResult.app_trans_id) {
      await this.orderRepository.update(order.id, {
        appTransId: zaloPayResult.app_trans_id,
        zpTransToken: zaloPayResult.zp_trans_token,
        status: 'pending',
      });
      this.logger.log('ƒê√£ c·∫≠p nh·∫≠t appTransId cho ƒë∆°n h√†ng:', zaloPayResult.app_trans_id);
    }

    // L∆∞u user_transaction v·ªõi status ph√π h·ª£p khi t·∫°o ƒë∆°n h√†ng
    if (order && dto.userId) {
      await this.userTransactionService.create({
        userId: dto.userId,
        orderId: order.id,
        amount: String(order.totalAmount),
        method: dto.paymentMethod === 'zalopay' ? TransactionMethod.ZALOPAY : TransactionMethod.CASH,
        status: dto.paymentMethod === 'zalopay' ? TransactionStatus.SUCCESS : TransactionStatus.PENDING,
        transTime: new Date().toISOString(),
        transactionCode: null,
        description: `T·∫°o giao d·ªãch cho ƒë∆°n h√†ng #${order.orderNumber}`,
      });
    }

    return {
      ...order,
      order_number: order.orderNumber,
    };
  }

  async markAsPaid(orderId: string, opts: { method?: string; transactionId?: string }) {
    const order = await this.orderRepository.findOne(orderId);
    if (!order) throw new NotFoundException('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
    await this.orderRepository.update(orderId, {
      // Kh√¥ng update status n·ªØa, ch·ªâ update zpTransToken
      zpTransToken: opts.transactionId || order.zpTransToken,
    });
    // C√≥ th·ªÉ l∆∞u th√™m transaction v√†o b·∫£ng user_transaction n·∫øu c·∫ßn
    // await this.userTransactionService.create({ ... })
    return true;
  }
}
